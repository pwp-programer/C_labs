#include <iostream>
using namespace std;
const int n = 9; //размер матрицы смежности
int i, j;
bool* visited = new bool[n]; // выделенеие памяти под матрицу
int graph[n][n] = { //матрица смежности
{0, 2, 0, 1, 1, 0, 0, 0, 0},
{2, 0, 1, 0, 1, 1, 0, 0, 0},
{0, 1, 0, 0, 0, 2, 0, 0, 0},
{1, 0, 0, 2, 1, 0, 0, 0, 0},
{1, 1, 0, 1, 0, 0, 0, 0, 0},
{0, 1, 2, 0, 0, 0, 0, 0, 1},
{0, 0, 0, 1, 0, 0, 0, 1, 0},
{0, 0, 0, 0, 0, 0, 1, 2, 3},
{0, 0, 0, 0, 1, 1, 0, 3, 0}
};
void DFS(int st) {
	int r; // создаем пременную для обхода
	cout << st + 1 << " "; // выводим точку обхода 
	visited[st] = true; // заносим true так как элемент уже посещен
		if ((graph[st][r] != 0) && (!visited[r])) /* проверка  первого символа на точто он не равен 0 
												  и не посещен и переходим к следующему вызову функции*/
			DFS(r); // рекурсивный вызов функции

}
int main() {
	setlocale(LC_ALL,"Rus");
	int start;
	cout << "Матрица смежности графа : " << endl;
	for (i = 0; i  < n; i++) {
		visited[i] = false; // заносим false так как мы не посетили а только вывели
		for (j = 0; j < n; j++)
			cout << " " << graph[i][j];
		cout << endl;
	}
	cout << "Стартовая вершина >> ";
	cin >> start;
	cout << "Порядок обхода : ";
	DFS(start - 1); //вызов функции со стартовой вершиной
	delete[]visited; //освобождаем память 
	system("pause");
	return 0;
}